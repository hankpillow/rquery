/*jslint undef: true, browser: true*/
/*globals phantom */

var fs      = require('fs'),
	sys     = require('system'),
	map     = require("mout/array/map"),
	compact = require("mout/array/compact"),
	trim    = require("mout/string/trim"),
	webpage = require("webpage").create(),
	spec,
	config,
	current_uri,
	uri_list,
	time,
	total;

function get_next_uri(err, agent) {
	"use strict";
	if (!uri_list || (!!uri_list && !uri_list.length)) {
		phantom.exit(0);
		return;
	}
	current_uri = config.prefix + trim(uri_list.shift());
	fetch_page();
}

function parse_document() {
	"use strict";
	var result = webpage.evaluate(spec.test);
	if (result !== false || result !== undefined) {
		if (!!result.success && !!result.success.length) {
			console.log(result.success.join("\n"));
		}
		if (!!result.fail && !!result.fail.length) {
			console.warn(result.fail.join("\n"));
		}
		get_next_uri();
	} else {
		console.warn("! spec not passed!".red);
		phantom.exit(0);
	}
}

function fetch_page() {
	"use strict";
	webpage.onLoadFinished = function (status) {
		var count = "(" + (total - uri_list.length) + "/" + total + ")",
			loaded_at = (new Date().getTime() - time) / 1000 + "ms";
		console.info(count + "\t" + current_uri + "\t" + loaded_at);
		if (status === "fail") {
			console.error("! request failed");
			get_next_uri();
			return;
		}
		webpage.includeJs(config.inject, parse_document);
	};
	webpage.open(current_uri);
}

function check_config() {
	"use strict";
	webpage.onLoadStarted = function (args) {
		time = new Date().getTime();
	};
	webpage.onError = function (args) {
		console.error("Failed to load url:" + current_uri);
		get_next_uri();
	};
	webpage.onResourceReceived = function(resource) {
		if (resource.url === current_uri && /^4\d{2}/.test(resource.status)) {
			webpage.stop();
		}
	};
	try {
		spec = require(config.spec);
	} catch (err) {
		console.error("! Failed to load spec: '" + config.spec + "'");
		console.info("try providing the absolute path to your spec file.");
		phantom.exit(1);
		return;
	}
	if (!spec || (!!spec && !spec.test)) {
		console.error("! spec file '" + config.spec + "' need a method called 'test'");
		phantom.exit(1);
		return;
	}
	total = uri_list.length;
	get_next_uri();
}

function read_uri_list() {
	"use strict";
	var file;
	try {
		file = fs.open(config.uri_list, "r");
	} catch (err) {
		console.error("! failed to read file: '" + config.uri_list + "'");
		phantom.exit(1);
		return;
	}
	uri_list = compact(map(file.read().split("\n"), function (val) {
		return !!val && !!val.length ? trim(val) : null;
	}));
	file.close();
	if (!uri_list.length) {
		console.log("- file '" + config.uri_list + "' is empty");
		phantom.exit(0);
		return;
	}
	check_config();
}

function init() {
	"use strict";
	config = {
		prefix : "",
		url : null,
		uri_list : null,
		spec : null,
		inject : "http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"
	};
	var flagname = null;
	sys.args.forEach(function (val) {
		if (/^-/.test(val)) {
			switch (val) {
			case "-u":
				flagname = "url";
				break;
			case "-l":
				flagname = "uri_list";
				break;
			case "-s":
				flagname = "spec";
				break;
			case "-p":
				flagname = "prefix";
				break;
			case "-i":
				flagname = "inject";
				break;
			}
		} else if (!!flagname) {
			config[flagname] = val;
			flagname = null;
		}
	});
	if (config.url) {
		uri_list = [config.url];
		check_config();
	} else if (config.uri_list) {
		read_uri_list();
	} else {
		console.log("Usage:");
		console.log(" $ rquery -s <spec-file> -h htt://github.com");
		console.log(" $ rquery -s <spec-file> -l <my-url-list-file>");
		console.log("Flags:");
		console.log(" -u <url> Single url");
		console.log(" -p <prefix> Leading string to be applyed on every url @see -l");
		console.log(" -s <spec> Spec file that will be called to validate every success request.");
		console.log(" -l <list-url> A file with a list of url. One url per line.");
		console.log(" -i <inject script> A hosted javascript to be inject on every request.");
		phantom.exit(0);
		return;
	}
}
init();