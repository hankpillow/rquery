#!/usr/bin/env node

/*jslint undef: true, browser: true */

var
	// libs
	jsdom   = require('jsdom'),
	fs      = require('fs'),
	program = require("commander"),
	request = require("request"),
	colors  = require("colors"),
	array   = require("mout").array,
	trim    = require("mout").string.trim,
	// local vars
	spec, current_uri, uri_list, total;

function get_next_uri(err, agent) {
	"use strict";
	if (!uri_list.length) {
		console.log("- no more url to request.");
		return;
	}
	current_uri = program.prefix + trim(uri_list.shift());
	fetch_page();
}

function parse_document(err, window) {
	"use strict";
	if (!!err) {
		console.error("! error creating document for: '%s'".red, current_uri);
		console.dir(err);
		get_next_uri();
		return;
	}
	if (!window) {
		console.error();
		return;
	}
	if (!!spec.test(window)) {
		get_next_uri();
	} else {
		console.warn("! spec failed and queue has stopped!".red);
	}
}

function create_document(body) {
	"use strict";
	jsdom.env({
		html: body,
		scripts: [program.script],
		done: parse_document,
		ProcessExternalResources : false,
		FetchExternalResources : false
	});
}

function fetch_page() {
	"use strict";
	console.info("+ (%s/%s) %s".inverse, (total - uri_list.length), total, current_uri);
	request(current_uri, function (error, response, body) {
		if (!!error) {
			console.error("! request error %s".red, error);
			get_next_uri();
			return;
		}
		if (!!response && /^4\d{2}/.test(response.statusCode.toString())) {
			console.warn("! request failed %s".red, response.statusCode);
			get_next_uri();
			return;
		}
		if (!!body) {
			create_document(body);
			return;
		}
		console.warn("! document as no body".cyan);
		get_next_uri();
	});
}

function start() {
	"use strict";
	//for log only
	total = uri_list.length;
	// init queue
	get_next_uri();
}

function read_uri_list(err, data) {
	"use strict";
	if (err) {
		console.log("! failed to read file: '%s'".red, err.path);
		return;
	}
	//clear empty values
	uri_list = array.map(data.split("\n"), function (val) {
		return !!val && !!val.length ? trim(val) : null;
	});
	//remove empty entries
	uri_list = array.compact(uri_list);
	if (!uri_list.length) {
		console.log("- file '%s' is empty".yellow, program.file);
		return;
	}
	start();
}

program
	.version('0.0.2')
	.usage('<spec-file> [-u http://www.github.com ...] ')
	.option('-f, --file <n>', 'text file with one url per line')
	.option('-u, --url <n>', 'single url')
	.option('-p, --prefix <n>', 'leading string to concat for every url request', "")
	.option('-s, --script <n>', 'hosted javascript file to be injected on the page. @default http://code.jquery.com/jquery-2.1.0.min.js', "http://code.jquery.com/jquery-2.1.0.min.js");

program
	.command("*")
	.description("The first argument must be the path to the spec you want to run for each page.")
	.action(function (env) {
		"use strict";
		try {
			spec = require(env);
		} catch (err) {
			console.error("! Failed to load spec: '%s'".red, env);
			console.info("try providing the absolute path to your spec file.".yellow);
			return;
		}
		if (!spec || (!!spec && !spec.test)) {
			console.error("! spec file '%s' need a method called 'test'".red, env);
			return;
		}
		if (!!program.url) {
			uri_list = [program.url];
			start();
		} else if (program.file) {
			fs.readFile(program.file, "utf8", read_uri_list);
		} else {
			program.help();
		}
	});

program.parse(process.argv);
if (!program.args.length) {
	program.help();
}